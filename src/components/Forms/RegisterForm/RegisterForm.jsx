/* eslint-disable react/jsx-no-bind */
/* eslint-disable camelcase */
import React from "react";
import PropTypes from "prop-types";
import { Link, useLocation } from "react-router-dom";

import EntryForm from "../EntryForm/EntryForm";
import Input from "../../UI-kit/Input/Input";

import Button from "../../UI-kit/Button/Button";
import Popup from "../../Popup/Popup";
import ConfirmRegisterForm from "../ConfirmRegisterForm/ConfirmRegisterForm";
import PasswordInput from "../../UI-kit/PasswordInput/PasswordInput";
import useFormAndValidation from "../../../hooks/useFormAndValidation";

import { register } from "../../../utils/Api";

const RegisterForm = ({ isOpenPopup, handleClosePopup }) => {
  const { values, errors, isValid, handleChange } = useFormAndValidation();
  const [isSuccessReg, setIsSuccessReg] = React.useState(false);
  const [userData, setUserData] = React.useState({});
  const location = useLocation();

  const handleRegister = async ({
    email,
    password,
    first_name,
    last_name,
    re_password,
  }) => {
    try {
      const res = await register({
        email,
        password,
        first_name,
        last_name,
        re_password,
      });
      setIsSuccessReg(true);
      setUserData(res);
    } catch (err) {
      setIsSuccessReg(false);
      console.log(`–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ${err.message} üòî`);
    }
  };

  function handleSubmit(evt) {
    evt.preventDefault();
    handleRegister(values);
  }

  return (
    <Popup
      isOpen={isOpenPopup}
      onClickClose={handleClosePopup}
      popupClass="popup__container_register-form"
    >
      {isSuccessReg ? (
        <ConfirmRegisterForm data={userData} />
      ) : (
        <EntryForm title="–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å" onSubmit={handleSubmit}>
          <Input
            inputType="text"
            inputPlaceholder="–ò–º—è"
            inputValue={values.first_name}
            inputError={errors.first_name}
            handleChange={handleChange}
            inputName="first_name"
            inputRequired
          />
          <Input
            inputType="text"
            inputPlaceholder="–§–∞–º–∏–ª–∏—è"
            inputValue={values.last_name}
            inputError={errors.last_name}
            handleChange={handleChange}
            inputName="last_name"
            inputRequired
          />
          <Input
            inputValue={values.email}
            inputError={errors.email}
            handleChange={handleChange}
            inputName="email"
            inputType="email"
            inputPlaceholder="Email"
            inputInfo="–ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–∞–∫¬†–ª–æ–≥–∏–Ω"
            inputRequired
          />
          <PasswordInput
            inputValue={values.password}
            inputError={errors.password}
            handleChange={handleChange}
            inputName="password"
            inputType="password"
            inputPlaceholder="–ü–∞—Ä–æ–ª—å"
            inputInfo="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å"
            inputRequired
          />
          <PasswordInput
            inputValue={values.re_password}
            inputError={errors.re_password}
            handleChange={handleChange}
            inputName="re_password"
            inputType="password"
            inputPlaceholder="–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è"
            inputRequired
          />
          <span className="input__text input__text_confirm">
            –ù–∞–∂–∏–º–∞—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤—ã –¥–∞—ë—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–∏—Ö
            –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö{" "}
          </span>
          <Button
            btnClass="button_type_form button_type_form_margin-top"
            btnType="submit"
            btnText="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
            onClick={() => {}}
            isValidBtn={isValid}
          />
          <Link to="/popup/login" state={{ previousLocation: location }}>
            <Button
              btnClass="button_type_link"
              btnType="button"
              btnText="–£–∂–µ¬†–µ—Å—Ç—å¬†–∞–∫–∫–∞—É–Ω—Ç?"
            />
          </Link>
        </EntryForm>
      )}
    </Popup>
  );
};

RegisterForm.propTypes = {
  isOpenPopup: PropTypes.bool,
  handleClosePopup: PropTypes.func,
};
RegisterForm.defaultProps = {
  isOpenPopup: true,
  handleClosePopup: () => {},
};
export default RegisterForm;

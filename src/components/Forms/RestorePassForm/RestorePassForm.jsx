/* eslint-disable react/jsx-no-bind */
/* eslint-disable camelcase */
import PropTypes from "prop-types";
import { useLocation, useNavigate } from "react-router-dom";
import React from "react";

import { resetPass, resetPassConfirmCode } from "../../../utils/Api";
import EntryForm from "../EntryForm/EntryForm";
import Input from "../../UI-kit/Input/Input";
import Button from "../../UI-kit/Button/Button";
import Popup from "../../Popup/Popup";
import useFormAndValidation from "../../../hooks/useFormAndValidation";
import { useApiError } from "../../../hooks/useApiError";
import PasswordInput from "../../UI-kit/PasswordInput/PasswordInput";

const RestorePassForm = ({ isOpenPopup, handleClosePopup }) => {
  const location = useLocation();
  const navigate = useNavigate();
  const { values, errors, isValid, handleChange, resetForm } =
    useFormAndValidation();
  const { isErrApi, setIsErrApi, clearApiError } = useApiError();

  const [isSuccessApi, setIsSuccessApi] = React.useState({
    resetPass: true,
    changePass: false,
  });
  const [userEmail, setUserEmail] = React.useState("");

  // –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –ø–∞—Ä–æ–ª—è –Ω–∞ –ø–æ—á—Ç—É
  const handleResetPassCode = async ({ email }) => {
    try {
      const res = await resetPassConfirmCode({ email });

      if (res) {
        setUserEmail(email);
        setIsSuccessApi({
          ...isSuccessApi,
          changePass: true,
          resetPass: false,
        });
      }
    } catch (err) {
      setIsErrApi({ ...isErrApi, message: err });
      console.error(
        "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ üòî",
        JSON.stringify(err, null, 2),
      );
    }
  };

  // –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–º–µ–Ω—É –ø–∞—Ä–æ–ª—è
  const handleResetPass = async ({
    confirmation_code,
    password,
    re_password,
  }) => {
    try {
      const res = await resetPass({
        email: userEmail,
        confirmation_code,
        password,
        re_password,
      });
      if (res) {
        console.log(res.message);
        setIsSuccessApi({
          ...isSuccessApi,
          changePass: true,
          resetPass: false,
        });
        navigate("/popup/login", { state: { previousLocation: location } });
      }
    } catch (err) {
      setIsErrApi({ ...isErrApi, message: err });
      console.error(
        "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ üòî",
        JSON.stringify(err, null, 2),
      );
    }
  };

  return (
    <Popup isOpen={isOpenPopup} onClickClose={handleClosePopup}>
      {/* —Ñ–æ—Ä–º–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–æ–¥–∞ –Ω–∞ –ø–æ—á—Ç—É  */}
      {isSuccessApi.resetPass ? (
        <EntryForm
          title="–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è"
          onSubmit={(evt) => {
            evt.preventDefault();
            handleResetPassCode(values);
            // –æ—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º –∏ –æ—à–∏–±–æ–∫
            clearApiError();
            resetForm();
          }}
        >
          <Input
            inputType="email"
            inputPlaceholder="Email"
            inputValue={values.email}
            inputError={errors.email}
            handleChange={handleChange}
            inputName="email"
            inputRequired
            inputInfo="–ö–æ–¥ –¥–ª—è¬†—Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –±—É–¥–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞¬†—ç—Ç–æ—Ç¬†–∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã"
          />
          <span className="entry-form__text_error">
            {isErrApi && `${isErrApi.message}`}
          </span>
          <Button
            btnClass="button_type_form"
            btnType="submit"
            btnText="–°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å"
            isValidBtn={isValid}
            onClick={() => {}}
          />
          <Button
            btnClass="button_type_link"
            btnType="button"
            btnText="–ù–∞–∑–∞–¥"
            onClick={() => navigate(-1)}
          />
        </EntryForm>
      ) : (
        ""
      )}

      {/* —Ñ–æ—Ä–º–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–æ–¥–∞  –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è */}
      {isSuccessApi.changePass ? (
        <EntryForm
          title="–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è"
          onSubmit={(evt) => {
            evt.preventDefault();
            handleResetPass(values);
            // –æ—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º –∏ –æ—à–∏–±–æ–∫
            clearApiError();
            resetForm();
          }}
        >
          <Input
            inputType="text"
            inputPlaceholder="–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
            inputInfo="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º¬†–Ω–∞¬†–ø–æ—á—Ç—É"
            inputValue={values.confirmation_code}
            inputError={errors.confirmation_code}
            handleChange={handleChange}
            inputName="confirmation_code"
            inputRequired
          />
          <PasswordInput
            inputType="password"
            inputPlaceholder="–ü–∞—Ä–æ–ª—å"
            inputInfo="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"
            inputValue={values.password}
            inputError={errors.password}
            inputName="password"
            handleChange={handleChange}
          />
          <PasswordInput
            inputType="password"
            inputPlaceholder="–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è"
            inputInfo="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
            inputValue={values.re_password}
            inputError={errors.re_password}
            inputName="re_password"
            handleChange={handleChange}
          />
          <span className="entry-form__text_error">
            {isErrApi && `${isErrApi.message}`}
          </span>
          <Button
            btnClass="button_type_form"
            btnType="submit"
            btnText="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
            isValidBtn={isValid}
            onClick={() => {}}
          />
          <Button
            btnClass="button_type_link"
            btnType="button"
            btnText="–ù–∞–∑–∞–¥"
            onClick={() => {
              clearApiError();
              setIsSuccessApi({
                changePass: false,
                resetPass: true,
              });
            }}
          />
        </EntryForm>
      ) : (
        ""
      )}
    </Popup>
  );
};
RestorePassForm.propTypes = {
  isOpenPopup: PropTypes.bool,
  handleClosePopup: PropTypes.func,
};
RestorePassForm.defaultProps = {
  isOpenPopup: true,
  handleClosePopup: () => {},
};
export default RestorePassForm;
